// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentSystem.Infrastructure.Contexts;

#nullable disable

namespace StudentSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230617111505_qwertyu")]
    partial class qwertyu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentSystem.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("StudentSystem.Domain.Entities.SubjectsOfStudents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectsOfTeachersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectsOfTeachersId");

                    b.ToTable("SublectsOfStudents", (string)null);
                });

            modelBuilder.Entity("StudentSystem.Domain.Entities.SubjectsOfTeachers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectsOfTeachers", (string)null);
                });

            modelBuilder.Entity("StudentSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("583f9a8a-6bbb-4a47-3a04-08db37684f69"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "muxammadyor@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "U3wZq33dK4rvlNqhJ0zTQlQ4jfvA5brrTfmdid+yDtk=",
                            PhoneNumber = "+998942142336",
                            Role = 0,
                            Salt = "15d9bb01-0aa2-4b35-b25b-362287751b03"
                        });
                });

            modelBuilder.Entity("StudentSystem.Domain.Entities.SubjectsOfStudents", b =>
                {
                    b.HasOne("StudentSystem.Domain.Entities.User", "Student")
                        .WithMany("SubjectOfStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StudentSystem.Domain.Entities.SubjectsOfTeachers", "SubjectsOfTeachers")
                        .WithMany("SubsOfStudents")
                        .HasForeignKey("SubjectsOfTeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubjectsOfTeachers");
                });

            modelBuilder.Entity("StudentSystem.Domain.Entities.SubjectsOfTeachers", b =>
                {
                    b.HasOne("StudentSystem.Domain.Entities.Subject", "Subject")
                        .WithMany("SubjectsOfTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentSystem.Domain.Entities.User", "Teacher")
                        .WithMany("SubjectsOfTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentSystem.Domain.Entities.Subject", b =>
                {
                    b.Navigation("SubjectsOfTeachers");
                });

            modelBuilder.Entity("StudentSystem.Domain.Entities.SubjectsOfTeachers", b =>
                {
                    b.Navigation("SubsOfStudents");
                });

            modelBuilder.Entity("StudentSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("SubjectOfStudent");

                    b.Navigation("SubjectsOfTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
